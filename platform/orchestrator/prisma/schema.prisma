generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  tier      String   @default("basic")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  bots       Bot[]
  apiKeys    ApiKey[]
  activities Activity[]
}

model Bot {
  id            String   @id @default(uuid())
  userId        String
  name          String
  description   String?
  agentId       String?
  tenantId      String?  @unique
  walletAddress String?
  walletSeed    String?
  walletPort    Int?
  features      Json?
  platforms     Json?
  config        Json?
  status        String   @default("pending")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user         User          @relation(fields: [userId], references: [id])
  commandLogs  CommandLog[]
  transactions Transaction[]
  activities   Activity[]
}

model CommandLog {
  id        String   @id @default(uuid())
  botId     String
  command   String
  args      Json?
  result    Json?
  timestamp DateTime @default(now())
  
  bot Bot @relation(fields: [botId], references: [id])
}

model ApiKey {
  id        String    @id @default(uuid())
  userId    String
  keyHash   String
  name      String?
  lastUsed  DateTime?
  createdAt DateTime  @default(now())
  
  user User @relation(fields: [userId], references: [id])
}

model Transaction {
  id        String   @id @default(uuid())
  botId     String?  // Optional - allows transactions from midnight-mcp service without bot context
  type      String
  amount    String
  from      String?
  to        String?
  status    String   @default("pending")
  hash      String?
  metadata  String?  // JSON string for additional transaction data
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  bot Bot? @relation(fields: [botId], references: [id])
  
  @@index([type])
}

model Activity {
  id          String   @id @default(uuid())
  userId      String
  botId       String?
  type        String   // 'bot_created', 'bot_deleted', 'treasury_deployed', 'proposal_created', 'vote_cast', 'transaction', 'system'
  title       String
  description String
  metadata    Json?    // Additional data like amounts, addresses, etc.
  severity    String   @default("info") // 'info', 'warning', 'error', 'success'
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id])
  bot  Bot? @relation(fields: [botId], references: [id])
  
  @@index([userId, read])
  @@index([createdAt])
}