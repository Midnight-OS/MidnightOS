services:
  # Platform Orchestrator API
  orchestrator:
    build:
      context: ../
      dockerfile: docker/Dockerfile.orchestrator
    container_name: midnightos-orchestrator
    env_file:
      - ../platform/orchestrator/.env
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ../user-data:/app/user-data
    ports:
      - "3002:3002"
    networks:
      - midnightos-network
    restart: unless-stopped

  # Midnight MCP Service
  midnight-mcp:
    build:
      context: ../
      dockerfile: docker/Dockerfile.midnight-mcp
    container_name: midnightos-mcp
    env_file:
      - ../services/midnight-mcp/.env
    environment:
      - NODE_ENV=production
      - PORT=3001
      - AGENT_ID=midnightos-mcp-001
      - MIDNIGHT_SEED=test-seed-for-docker-development-change-in-production
      - WALLET_SERVER_HOST=midnight-mcp
      - WALLET_SERVER_PORT=3001
      - STORAGE_BASE_DIR=/app/.storage
      - PROOF_SERVER=http://proof-server:6300
      - INDEXER_URL=http://indexer:8088
      - NODE_URL=ws://midnight-node:9944
    ports:
      - "3001:3001"
    volumes:
      - wallet-storage:/app/.storage
      - mcp-logs:/app/logs
    networks:
      - midnightos-network
    depends_on:
      midnight-node:
        condition: service_healthy
      indexer:
        condition: service_started
      proof-server:
        condition: service_started
    restart: unless-stopped

  # Platform Frontend
  frontend:
    build:
      context: ../
      dockerfile: docker/Dockerfile.frontend
    container_name: midnightos-frontend
    env_file:
      - ../platform/frontend/.env
    environment:
      - NODE_ENV=production
      - PORT=3003
      - HOSTNAME=0.0.0.0
      - NEXT_PUBLIC_API_URL=http://orchestrator:3002/api
      - NEXT_PUBLIC_MCP_URL=http://midnight-mcp:3001
    ports:
      - "3003:3003"
    depends_on:
      - orchestrator
      - midnight-mcp
    networks:
      - midnightos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/api/health"]
      interval: 30s
      timeout: 10s
      start_period: 40s
      retries: 3

  # ElizaOS Agent (Default instance)
  eliza-agent:
    build:
      context: ../
      dockerfile: docker/Dockerfile.eliza-agent
    container_name: midnightos-eliza-agent
    env_file:
      - ../services/eliza-agent/.env
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MCP_SERVER_URL=http://midnight-mcp:3001
    ports:
      - "3000:3000"
    depends_on:
      - midnight-mcp
    networks:
      - midnightos-network
    restart: unless-stopped
    volumes:
      - eliza-data:/app/data

  # Midnight Node (Standalone local blockchain)
  midnight-node:
    image: 'midnightnetwork/midnight-node:0.12.0'
    container_name: midnightos-node-standalone
    ports:
      - "9944:9944"
    environment:
      CFG_PRESET: "dev"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9944/health" ]
      interval: 2s
      timeout: 5s
      retries: 5
      start_period: 40s
    networks:
      - midnightos-network
    restart: unless-stopped

  # Indexer (Required for wallet syncing)
  indexer:
    image: 'midnightntwrk/indexer-standalone:2.1.1'
    container_name: midnightos-indexer-standalone
    ports:
      - "8088:8088"
    environment:
      RUST_LOG: "indexer=info,chain_indexer=info,indexer_api=info,wallet_indexer=info,indexer_common=info,fastrace_opentelemetry=off,info"
      # Random 32-byte hex-encoded secret for standalone mode
      APP__INFRA__SECRET: "303132333435363738393031323334353637383930313233343536373839303132"
      APP__INFRA__NODE__URL: "ws://midnight-node:9944"
    depends_on:
      midnight-node:
        condition: service_started
    networks:
      - midnightos-network
    restart: unless-stopped

  # Proof Server (Required for Midnight Network)
  proof-server:
    image: midnightnetwork/proof-server:4.0.0
    container_name: midnightos-proof-server-standalone
    environment:
      - ROCKET_ADDRESS=0.0.0.0
      - ROCKET_PORT=6300
      - ROCKET_LOG_LEVEL=info
      - RUST_LOG=info
      - RUST_BACKTRACE=full
    ports:
      - "6300:6300"
    volumes:
      - proof-server-data:/data
    networks:
      - midnightos-network
    restart: unless-stopped
    # Health check disabled - image has no curl/wget/nc
    # Service is healthy if it's responding on port 6300

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: midnightos-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - orchestrator
      - midnight-mcp
    networks:
      - midnightos-network
    restart: unless-stopped
    profiles:
      - with-nginx

networks:
  midnightos-network:
    driver: bridge

volumes:
  wallet-storage:
    driver: local
  user-data:
    driver: local
  mcp-logs:
    driver: local
  eliza-data:
    driver: local
  proof-cache:
    driver: local
  proof-server-data:
    driver: local