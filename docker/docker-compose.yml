services:
  # Platform Orchestrator API
  orchestrator:
    build:
      context: ../
      dockerfile: docker/Dockerfile.orchestrator
    container_name: midnightos-orchestrator
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DATABASE_URL=${DATABASE_URL:-prisma+postgres://accelerate.prisma-data.net/?api_key=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqd3RfaWQiOjEsInNlY3VyZV9rZXkiOiJza18ydDdlWUtUQk1XTGRZU3BsdHotcFgiLCJhcGlfa2V5IjoiMDFLNjhHV1JYMkROMEJaM0ZaSDlLVDlaTTAiLCJ0ZW5hbnRfaWQiOiIwZjIzNmUzOGUxYTBhMmFhMmI2MTY5OTMwNTJjOTIzYjU0YzNjNWY5ZmMyMGRjZjhiMDc0YTdjYjlmMDFiZjc3IiwiaW50ZXJuYWxfc2VjcmV0IjoiNGIxZWQ1MTAtY2UxYi00NTgyLWE0N2UtZWYyZmI3NThhNThkIn0.b8Qj5Wq27quYeL1ChEz5xvY5fT1HLgPR3878SYGJ_q4}
      - DIRECT_URL=${DIRECT_URL:-database_url}
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-here}
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ../user-data:/app/user-data
    ports:
      - "3002:3002"
    networks:
      - midnightos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Midnight MCP Service
  midnight-mcp:
    build:
      context: ../
      dockerfile: docker/Dockerfile.midnight-mcp
    container_name: midnightos-mcp
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=${DATABASE_URL:-prisma+postgres://accelerate.prisma-data.net/?api_key=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqd3RfaWQiOjEsInNlY3VyZV9rZXkiOiJza18ydDdlWUtUQk1XTGRZU3BsdHotcFgiLCJhcGlfa2V5IjoiMDFLNjhHV1JYMkROMEJaM0ZaSDlLVDlaTTAiLCJ0ZW5hbnRfaWQiOiIwZjIzNmUzOGUxYTBhMmFhMmI2MTY5OTMwNTJjOTIzYjU0YzNjNWY5ZmMyMGRjZjhiMDc0YTdjYjlmMDFiZjc3IiwiaW50ZXJuYWxfc2VjcmV0IjoiNGIxZWQ1MTAtY2UxYi00NTgyLWE0N2UtZWYyZmI3NThhNThkIn0.b8Qj5Wq27quYeL1ChEz5xvY5fT1HLgPR3878SYGJ_q4}
      - DIRECT_URL=${DIRECT_URL:-database_url}
      - WALLET_SERVER_HOST=midnight-mcp
      - WALLET_SERVER_PORT=3001
      - NETWORK_ID=${NETWORK_ID:-TestNet}
      - USE_EXTERNAL_PROOF_SERVER=true
      - PROOF_SERVER=${PROOF_SERVER:-http://proof-server:6300}
      - INDEXER=${INDEXER:-https://indexer.testnet-02.midnight.network/api/v1/graphql}
      - INDEXER_WS=${INDEXER_WS:-wss://indexer.testnet-02.midnight.network/api/v1/graphql/ws}
      - MN_NODE=${MN_NODE:-https://rpc.testnet-02.midnight.network}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - STORAGE_BASE_DIR=/app/.storage
    ports:
      - "3001:3001"
    volumes:
      - wallet-storage:/app/.storage
      - mcp-logs:/app/logs
    networks:
      - midnightos-network
    depends_on:
      - proof-server
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Platform Frontend
  frontend:
    build:
      context: ../
      dockerfile: docker/Dockerfile.frontend
    container_name: midnightos-frontend
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://orchestrator:3002/api
      - NEXT_PUBLIC_MCP_URL=http://midnight-mcp:3001
      - NEXT_PUBLIC_SUPABASE_URL=${SUPABASE_URL:-https://yuherkwaayoegfjhhjhz.supabase.co}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY:-eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inl1aGVya3dhYXlvZWdmamhoamh6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkwNzA2NzYsImV4cCI6MjA3NDY0NjY3Nn0.YdBnNWNyyPwNN1l0cy7EpR70jvslw_4Mac1ju-Owtcs}
    ports:
      - "3003:3000"
    depends_on:
      - orchestrator
      - midnight-mcp
    networks:
      - midnightos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ElizaOS Agent (Default instance)
  eliza-agent:
    build:
      context: ../
      dockerfile: docker/Dockerfile.eliza-agent
    container_name: midnightos-eliza-agent
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MCP_SERVER_URL=http://midnight-mcp:3001
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    ports:
      - "3000:3000"
    depends_on:
      - midnight-mcp
    networks:
      - midnightos-network
    restart: unless-stopped
    volumes:
      - eliza-data:/app/data
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Proof Server (Required for Midnight Network)
  proof-server:
    image: midnightnetwork/proof-server:latest
    container_name: midnightos-proof-server
    environment:
      - ROCKET_ADDRESS=0.0.0.0
      - ROCKET_PORT=6300
      - ROCKET_LOG_LEVEL=info
      - RUST_LOG=info
    ports:
      - "6300:6300"
    volumes:
      - proof-server-data:/data
    networks:
      - midnightos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6300/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: midnightos-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - orchestrator
      - midnight-mcp
    networks:
      - midnightos-network
    restart: unless-stopped
    profiles:
      - with-nginx

networks:
  midnightos-network:
    driver: bridge

volumes:
  wallet-storage:
    driver: local
  user-data:
    driver: local
  mcp-logs:
    driver: local
  eliza-data:
    driver: local
  proof-cache:
    driver: local
  proof-server-data:
    driver: local