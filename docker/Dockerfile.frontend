# Build stage
FROM node:20-alpine AS builder

WORKDIR /app

# Install build dependencies and pnpm
RUN apk add --no-cache python3 make g++ git
RUN npm install -g pnpm@latest

# Copy root package files and lockfile
COPY package.json ./
COPY pnpm-lock.yaml ./
COPY pnpm-workspace.yaml ./
COPY platform/frontend/package.json ./platform/frontend/

# Install dependencies from workspace root
RUN pnpm install --frozen-lockfile

WORKDIR /app/platform/frontend

# Copy source code
COPY platform/frontend ./

# Set Next.js to use standalone output (smaller, faster)
ENV NEXT_TELEMETRY_DISABLED 1

# Build Next.js application
RUN pnpm build

# Production stage
FROM node:20-alpine

WORKDIR /app

# Install runtime dependencies
RUN apk add --no-cache curl

# Create user and set permissions FIRST
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Copy only necessary files from builder
COPY --from=builder --chown=nextjs:nodejs /app/platform/frontend/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/platform/frontend/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/platform/frontend/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/platform/frontend/next.config.js ./next.config.js

USER nextjs

# Use port 3003 to match package.json start script
EXPOSE 3003

ENV NODE_ENV=production
ENV PORT=3003
ENV HOSTNAME="0.0.0.0"
ENV NEXT_TELEMETRY_DISABLED 1

# Health check using dedicated API endpoint
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:3003/api/health || exit 1

# Start Next.js directly (standalone includes node_modules)
CMD ["pnpm", "start"]