# Proof Server for Midnight Network Zero-Knowledge Proofs
FROM node:20-alpine AS builder

WORKDIR /app

# Install build dependencies
RUN apk add --no-cache python3 make g++ git

# Copy package files
COPY services/proof-server/package*.json ./services/proof-server/
COPY services/proof-server/pnpm-lock.yaml ./services/proof-server/ 2>/dev/null || true

# Install pnpm
RUN npm install -g pnpm@10.15.0

# Install dependencies
WORKDIR /app/services/proof-server
RUN pnpm install --frozen-lockfile || npm install

# Copy source code
COPY services/proof-server/ .

# Build the application
RUN pnpm build || npm run build

# Runtime stage
FROM node:20-alpine

WORKDIR /app

# Install runtime dependencies
RUN apk add --no-cache tini

# Install pnpm
RUN npm install -g pnpm@10.15.0

# Copy production dependencies
COPY --from=builder /app/services/proof-server/package*.json ./
COPY --from=builder /app/services/proof-server/pnpm-lock.yaml ./ 2>/dev/null || true
RUN pnpm install --prod --frozen-lockfile || npm ci --production

# Copy built application
COPY --from=builder /app/services/proof-server/dist ./dist

# Create cache directory
RUN mkdir -p /app/cache

# Set environment variables
ENV NODE_ENV=production
ENV PORT=6300
ENV LOG_LEVEL=info
ENV CACHE_DIR=/app/cache

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD wget --spider --quiet http://localhost:6300/health || exit 1

# Expose port
EXPOSE 6300

# Use tini to handle signals properly
ENTRYPOINT ["/sbin/tini", "--"]

# Start the application
CMD ["node", "dist/index.js"]